#######################################################################
# Test for copying block of size 10;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $10, %rdx		# src and dst have 10 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	irmovq $1,%r13
	xorq %rax,%rax
	iaddq $-8,%rdx
	jmp begin4
loop1:
	iaddq $8,%rdx
	mrmovq (%rdi),%rbx
	mrmovq 8(%rdi),%rcx
	mrmovq 16(%rdi),%rbp
	mrmovq 24(%rdi),%r8
	mrmovq 32(%rdi),%r9
	mrmovq 40(%rdi),%r10
	mrmovq 48(%rdi),%r11
	mrmovq 56(%rdi),%r12
	rmmovq %rbx,(%rsi)
	rmmovq %rcx,8(%rsi)
	rmmovq %rbp,16(%rsi)
	rmmovq %r8,24(%rsi)
	rmmovq %r9,32(%rsi)
	rmmovq %r10,40(%rsi)
	rmmovq %r11,48(%rsi)
	rmmovq %r12,56(%rsi)
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %rbx,%rbx
	cmovg %r13,%rax
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %rcx,%rcx
	cmovg %r13,%rax
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %rbp,%rbp
	cmovg %r13,%rax
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %r8,%r8
	cmovg %r13,%rax
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %r9,%r9
	cmovg %r13,%rax
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %r10,%r10
	cmovg %r13,%rax
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %r11,%r11
	cmovg %r13,%rax
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %r12,%r12
	cmovg %r13,%rax
	iaddq $64,%rdi
	iaddq $64,%rsi
	iaddq $-16,%rdx
	jge loop1

begin2:
	iaddq $4,%rdx
	jl begin3
loop2:
	iaddq $4,%rdx
	mrmovq (%rdi),%rbx
	mrmovq 8(%rdi),%rcx
	mrmovq 16(%rdi),%rbp
	mrmovq 24(%rdi),%r8
	rmmovq %rbx,(%rsi)
	rmmovq %rcx,8(%rsi)
	rmmovq %rbp,16(%rsi)
	rmmovq %r8,24(%rsi)
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %rbx,%rbx
	cmovg %r13,%rax
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %rcx,%rcx
	cmovg %r13,%rax
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %rbp,%rbp
	cmovg %r13,%rax
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %r8,%r8
	cmovg %r13,%rax
	iaddq $32,%rdi
	iaddq $32,%rsi
	iaddq $-8,%rdx
	jge loop2

begin3:
	iaddq $2,%rdx
	jl begin4
loop3:
	iaddq $2,%rdx
	mrmovq (%rdi),%rbx
	mrmovq 8(%rdi),%rcx
	rmmovq %rbx,(%rsi)
	rmmovq %rcx,8(%rsi)
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %rbx,%rbx
	cmovg %r13,%rax
	rrmovq %rax,%r13
	iaddq $1,%r13
	andq %rcx,%rcx
	cmovg %r13,%rax
	iaddq $16,%rdi
	iaddq $16,%rsi
	iaddq $-4,%rdx
	jge loop3

begin4:
	iaddq $8,%rdx
	jle Done
loop4:
	mrmovq (%rdi),%rcx
	iaddq $8,%rdi
	rmmovq %rcx,(%rsi)
	iaddq $8,%rsi
	andq %rcx,%rcx
	cmovg %r13,%rax
	iaddq $-1,%rdx
	jg loop4
	# nop
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 7.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $7,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $10,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad 3
	.quad 4
	.quad 5
	.quad -6
	.quad 7
	.quad -8
	.quad 9
	.quad -10
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
