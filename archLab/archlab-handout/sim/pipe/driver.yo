                            | #######################################################################
                            | # Test for copying block of size 10;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f40006000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20a00000000000000 | 	irmovq $10, %rdx		# src and dst have 10 elements
0x014: 30f62805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7c804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 805e03000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 30fd0100000000000000 | 	irmovq $1,%r13
0x045: 6300                 | 	xorq %rax,%rax
0x047: c0f2f8ffffffffffffff | 	iaddq $-8,%rdx
0x051: 700b03000000000000   | 	jmp begin4
0x05a:                      | loop1:
0x05a: c0f20800000000000000 | 	iaddq $8,%rdx
0x064: 50370000000000000000 | 	mrmovq (%rdi),%rbx
0x06e: 50170800000000000000 | 	mrmovq 8(%rdi),%rcx
0x078: 50571000000000000000 | 	mrmovq 16(%rdi),%rbp
0x082: 50871800000000000000 | 	mrmovq 24(%rdi),%r8
0x08c: 50972000000000000000 | 	mrmovq 32(%rdi),%r9
0x096: 50a72800000000000000 | 	mrmovq 40(%rdi),%r10
0x0a0: 50b73000000000000000 | 	mrmovq 48(%rdi),%r11
0x0aa: 50c73800000000000000 | 	mrmovq 56(%rdi),%r12
0x0b4: 40360000000000000000 | 	rmmovq %rbx,(%rsi)
0x0be: 40160800000000000000 | 	rmmovq %rcx,8(%rsi)
0x0c8: 40561000000000000000 | 	rmmovq %rbp,16(%rsi)
0x0d2: 40861800000000000000 | 	rmmovq %r8,24(%rsi)
0x0dc: 40962000000000000000 | 	rmmovq %r9,32(%rsi)
0x0e6: 40a62800000000000000 | 	rmmovq %r10,40(%rsi)
0x0f0: 40b63000000000000000 | 	rmmovq %r11,48(%rsi)
0x0fa: 40c63800000000000000 | 	rmmovq %r12,56(%rsi)
0x104: 200d                 | 	rrmovq %rax,%r13
0x106: c0fd0100000000000000 | 	iaddq $1,%r13
0x110: 6233                 | 	andq %rbx,%rbx
0x112: 26d0                 | 	cmovg %r13,%rax
0x114: 200d                 | 	rrmovq %rax,%r13
0x116: c0fd0100000000000000 | 	iaddq $1,%r13
0x120: 6211                 | 	andq %rcx,%rcx
0x122: 26d0                 | 	cmovg %r13,%rax
0x124: 200d                 | 	rrmovq %rax,%r13
0x126: c0fd0100000000000000 | 	iaddq $1,%r13
0x130: 6255                 | 	andq %rbp,%rbp
0x132: 26d0                 | 	cmovg %r13,%rax
0x134: 200d                 | 	rrmovq %rax,%r13
0x136: c0fd0100000000000000 | 	iaddq $1,%r13
0x140: 6288                 | 	andq %r8,%r8
0x142: 26d0                 | 	cmovg %r13,%rax
0x144: 200d                 | 	rrmovq %rax,%r13
0x146: c0fd0100000000000000 | 	iaddq $1,%r13
0x150: 6299                 | 	andq %r9,%r9
0x152: 26d0                 | 	cmovg %r13,%rax
0x154: 200d                 | 	rrmovq %rax,%r13
0x156: c0fd0100000000000000 | 	iaddq $1,%r13
0x160: 62aa                 | 	andq %r10,%r10
0x162: 26d0                 | 	cmovg %r13,%rax
0x164: 200d                 | 	rrmovq %rax,%r13
0x166: c0fd0100000000000000 | 	iaddq $1,%r13
0x170: 62bb                 | 	andq %r11,%r11
0x172: 26d0                 | 	cmovg %r13,%rax
0x174: 200d                 | 	rrmovq %rax,%r13
0x176: c0fd0100000000000000 | 	iaddq $1,%r13
0x180: 62cc                 | 	andq %r12,%r12
0x182: 26d0                 | 	cmovg %r13,%rax
0x184: c0f74000000000000000 | 	iaddq $64,%rdi
0x18e: c0f64000000000000000 | 	iaddq $64,%rsi
0x198: c0f2f0ffffffffffffff | 	iaddq $-16,%rdx
0x1a2: 755a00000000000000   | 	jge loop1
                            | 
0x1ab:                      | begin2:
0x1ab: c0f20400000000000000 | 	iaddq $4,%rdx
0x1b5: 727f02000000000000   | 	jl begin3
0x1be:                      | loop2:
0x1be: c0f20400000000000000 | 	iaddq $4,%rdx
0x1c8: 50370000000000000000 | 	mrmovq (%rdi),%rbx
0x1d2: 50170800000000000000 | 	mrmovq 8(%rdi),%rcx
0x1dc: 50571000000000000000 | 	mrmovq 16(%rdi),%rbp
0x1e6: 50871800000000000000 | 	mrmovq 24(%rdi),%r8
0x1f0: 40360000000000000000 | 	rmmovq %rbx,(%rsi)
0x1fa: 40160800000000000000 | 	rmmovq %rcx,8(%rsi)
0x204: 40561000000000000000 | 	rmmovq %rbp,16(%rsi)
0x20e: 40861800000000000000 | 	rmmovq %r8,24(%rsi)
0x218: 200d                 | 	rrmovq %rax,%r13
0x21a: c0fd0100000000000000 | 	iaddq $1,%r13
0x224: 6233                 | 	andq %rbx,%rbx
0x226: 26d0                 | 	cmovg %r13,%rax
0x228: 200d                 | 	rrmovq %rax,%r13
0x22a: c0fd0100000000000000 | 	iaddq $1,%r13
0x234: 6211                 | 	andq %rcx,%rcx
0x236: 26d0                 | 	cmovg %r13,%rax
0x238: 200d                 | 	rrmovq %rax,%r13
0x23a: c0fd0100000000000000 | 	iaddq $1,%r13
0x244: 6255                 | 	andq %rbp,%rbp
0x246: 26d0                 | 	cmovg %r13,%rax
0x248: 200d                 | 	rrmovq %rax,%r13
0x24a: c0fd0100000000000000 | 	iaddq $1,%r13
0x254: 6288                 | 	andq %r8,%r8
0x256: 26d0                 | 	cmovg %r13,%rax
0x258: c0f72000000000000000 | 	iaddq $32,%rdi
0x262: c0f62000000000000000 | 	iaddq $32,%rsi
0x26c: c0f2f8ffffffffffffff | 	iaddq $-8,%rdx
0x276: 75be01000000000000   | 	jge loop2
                            | 
0x27f:                      | begin3:
0x27f: c0f20200000000000000 | 	iaddq $2,%rdx
0x289: 720b03000000000000   | 	jl begin4
0x292:                      | loop3:
0x292: c0f20200000000000000 | 	iaddq $2,%rdx
0x29c: 50370000000000000000 | 	mrmovq (%rdi),%rbx
0x2a6: 50170800000000000000 | 	mrmovq 8(%rdi),%rcx
0x2b0: 40360000000000000000 | 	rmmovq %rbx,(%rsi)
0x2ba: 40160800000000000000 | 	rmmovq %rcx,8(%rsi)
0x2c4: 200d                 | 	rrmovq %rax,%r13
0x2c6: c0fd0100000000000000 | 	iaddq $1,%r13
0x2d0: 6233                 | 	andq %rbx,%rbx
0x2d2: 26d0                 | 	cmovg %r13,%rax
0x2d4: 200d                 | 	rrmovq %rax,%r13
0x2d6: c0fd0100000000000000 | 	iaddq $1,%r13
0x2e0: 6211                 | 	andq %rcx,%rcx
0x2e2: 26d0                 | 	cmovg %r13,%rax
0x2e4: c0f71000000000000000 | 	iaddq $16,%rdi
0x2ee: c0f61000000000000000 | 	iaddq $16,%rsi
0x2f8: c0f2fcffffffffffffff | 	iaddq $-4,%rdx
0x302: 759202000000000000   | 	jge loop3
                            | 
0x30b:                      | begin4:
0x30b: c0f20800000000000000 | 	iaddq $8,%rdx
0x315: 715d03000000000000   | 	jle Done
0x31e:                      | loop4:
0x31e: 50170000000000000000 | 	mrmovq (%rdi),%rcx
0x328: c0f70800000000000000 | 	iaddq $8,%rdi
0x332: 40160000000000000000 | 	rmmovq %rcx,(%rsi)
0x33c: c0f60800000000000000 | 	iaddq $8,%rsi
0x346: 6211                 | 	andq %rcx,%rcx
0x348: 26d0                 | 	cmovg %r13,%rax
0x34a: c0f2ffffffffffffffff | 	iaddq $-1,%rdx
0x354: 761e03000000000000   | 	jg loop4
                            | 	# nop
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x35d:                      | Done:
0x35d: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x35e:                      | End:
                            | #/* $end ncopy-ys */
0x35e:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 7.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x35e:                      | check:
                            | 	# Return value test
0x35e: 30fa0700000000000000 | 	irmovq $7,%r10
0x368: 61a0                 | 	subq %r10,%rax
0x36a: 738603000000000000   | 	je checkb
0x373: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x37d: 70c404000000000000   | 	jmp cdone
0x386:                      | checkb:
                            | 	# Code length check
0x386: 30f05e03000000000000 | 	irmovq EndFun,%rax
0x390: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x39a: 6120                 | 	subq %rdx,%rax
0x39c: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x3a6: 6102                 | 	subq %rax,%rdx
0x3a8: 75c403000000000000   | 	jge checkm
0x3b1: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x3bb: 70c404000000000000   | 	jmp cdone
0x3c4:                      | checkm:
0x3c4: 30f22805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x3ce: 30f3c804000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x3d8: 30f70a00000000000000 | 	irmovq $10,%rdi  # Count
0x3e2: 6277                 | 	andq %rdi,%rdi
0x3e4: 734204000000000000   | 	je checkpre         # Skip check if count = 0
0x3ed:                      | mcloop:
0x3ed: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x3f7: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x401: 6160                 | 	subq %rsi,%rax
0x403: 731f04000000000000   | 	je  mok
0x40c: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x416: 70c404000000000000   | 	jmp cdone
0x41f:                      | mok:
0x41f: 30f00800000000000000 | 	irmovq $8,%rax
0x429: 6002                 | 	addq %rax,%rdx	  # dest ++
0x42b: 6003                 | 	addq %rax,%rbx    # src++
0x42d: 30f00100000000000000 | 	irmovq $1,%rax
0x437: 6107                 | 	subq %rax,%rdi    # cnt--
0x439: 76ed03000000000000   | 	jg mcloop
0x442:                      | checkpre:
                            | 	# Check for corruption
0x442: 30f22005000000000000 | 	irmovq Predest,%rdx
0x44c: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x456: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x460: 6120                 | 	subq %rdx,%rax
0x462: 737e04000000000000   | 	je checkpost
0x46b: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x475: 70c404000000000000   | 	jmp cdone
0x47e:                      | checkpost:
                            | 	# Check for corruption
0x47e: 30f27805000000000000 | 	irmovq Postdest,%rdx
0x488: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x492: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x49c: 6120                 | 	subq %rdx,%rax
0x49e: 73ba04000000000000   | 	je checkok
0x4a7: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x4b1: 70c404000000000000   | 	jmp cdone
0x4ba:                      | checkok:
                            | 	# Successful checks
0x4ba: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x4c4:                      | cdone:
0x4c4: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x4c8:                      | 	.align 8
0x4c8:                      | src:
0x4c8: 0100000000000000     | 	.quad 1
0x4d0: 0200000000000000     | 	.quad 2
0x4d8: 0300000000000000     | 	.quad 3
0x4e0: 0400000000000000     | 	.quad 4
0x4e8: 0500000000000000     | 	.quad 5
0x4f0: faffffffffffffff     | 	.quad -6
0x4f8: 0700000000000000     | 	.quad 7
0x500: f8ffffffffffffff     | 	.quad -8
0x508: 0900000000000000     | 	.quad 9
0x510: f6ffffffffffffff     | 	.quad -10
0x518: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x520:                      | 	.align 16
0x520:                      | Predest:
0x520: fadebc0000000000     | 	.quad 0xbcdefa
0x528:                      | dest:
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578:                      | Postdest:
0x578: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x580:                      | .align 8
                            | # Run time stack
0x580: 0000000000000000     | 	.quad 0
0x588: 0000000000000000     | 	.quad 0
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
                            | 
0x600:                      | Stack:
