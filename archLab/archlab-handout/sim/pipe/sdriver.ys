#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	rrmovq %rdx,%rax
	irmovq $0x8000000000000000,%r13
	irmovq $-1,%r14
	# andq %rdx,%rdx
	# jg begin0
	# ret
begin0:
	iaddq $-8,%rdx
	jl begin2
# 	jge begin1
# 	iaddq $8,%rdx
# loop0:
# 	mrmovq (%rdi),%rcx
# 	iaddq $8,%rdi
# 	rmmovq %rcx,(%rsi)
# 	iaddq $8,%rsi
# 	andq %r13,%rcx
# 	cmovl %r14,%rcx
# 	addq %rcx,%rax
# 	iaddq $-1,%rdx
# 	jg loop0
# 	ret
begin1:
loop1:
	iaddq $8,%rdx
	
	mrmovq (%rdi),%rbx
	mrmovq 8(%rdi),%rcx
	rmmovq %rbx,(%rsi)
	rmmovq %rcx,8(%rsi)

	andq %r13,%rbx
	cmovl %r14,%rbx
	addq %rbx,%rax
	andq %r13,%rcx
	cmovl %r14,%rcx
	addq %rcx,%rax

	mrmovq 16(%rdi),%rbx
	mrmovq 24(%rdi),%rcx
	rmmovq %rbx,16(%rsi)
	rmmovq %rcx,24(%rsi)

	andq %r13,%rbx
	cmovl %r14,%rbx
	addq %rbx,%rax
	andq %r13,%rcx
	cmovl %r14,%rcx
	addq %rcx,%rax

	mrmovq 32(%rdi),%rbx
	mrmovq 40(%rdi),%rcx
	rmmovq %rbx,32(%rsi)
	rmmovq %rcx,40(%rsi)

	andq %r13,%rbx
	cmovl %r14,%rbx
	addq %rbx,%rax
	andq %r13,%rcx
	cmovl %r14,%rcx
	addq %rcx,%rax

	mrmovq 48(%rdi),%rbx
	mrmovq 56(%rdi),%rcx
	rmmovq %rbx,48(%rsi)
	rmmovq %rcx,56(%rsi)

	andq %r13,%rbx
	cmovl %r14,%rbx
	addq %rbx,%rax
	andq %r13,%rcx
	cmovl %r14,%rcx
	addq %rcx,%rax

	iaddq $64,%rdi
	iaddq $64,%rsi
	iaddq $-16,%rdx
	jge loop1

begin2:
	iaddq $4,%rdx
	jl begin3

	mrmovq (%rdi),%rbx
	mrmovq 8(%rdi),%rcx
	rmmovq %rbx,(%rsi)
	rmmovq %rcx,8(%rsi)

	andq %r13,%rbx
	cmovl %r14,%rbx
	addq %rbx,%rax
	andq %r13,%rcx
	cmovl %r14,%rcx
	addq %rcx,%rax

	mrmovq 16(%rdi),%rbx
	mrmovq 24(%rdi),%rcx
	rmmovq %rbx,16(%rsi)
	rmmovq %rcx,24(%rsi)

	andq %r13,%rbx
	cmovl %r14,%rbx
	addq %rbx,%rax
	andq %r13,%rcx
	cmovl %r14,%rcx
	addq %rcx,%rax

	iaddq $32,%rdi
	iaddq $32,%rsi
	iaddq $-4,%rdx

begin3:
	iaddq $2,%rdx
	jl begin4

	mrmovq (%rdi),%rbx
	mrmovq 8(%rdi),%rcx
	rmmovq %rbx,(%rsi)
	rmmovq %rcx,8(%rsi)

	andq %r13,%rbx
	cmovl %r14,%rbx
	addq %rbx,%rax
	andq %r13,%rcx
	cmovl %r14,%rcx
	addq %rcx,%rax

	iaddq $16,%rdi
	iaddq $16,%rsi
	iaddq $-2,%rdx

begin4:
	iaddq $1,%rdx
	jl Done
	mrmovq (%rdi),%rcx
	rmmovq %rcx,(%rsi)
	andq %r13,%rcx
	cmovl %r14,%rcx
	addq %rcx,%rax
	# nop
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad 3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
